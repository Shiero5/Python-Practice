# coding:utf-8
#東京大学理科二類７組1年 J5170079 江口大志
"""
課題を指定しているスライドに「(0,0)と(1,0)を中心とする半径1の円弧で挟まれた部分」と記述されているが
実際そのように図を書いた時、課題を指定しているスライドの図のようにはならない。
以下のプログラムでは「(1,0)と(0,1)を中心とする半径1の円弧で挟まれた部分」（すなわち図を優先）として記述した。
"""
import random
import time

def kadai3(n):
# nは生成する点の個数
    count = 0
    for i in range(n):
        x = random.randint(0,n)
        x = float(x) / n
        y = random.randint(0,n)
        y = float(y) / n
        # print(x,y)

        if ((x - 1) ** 2 + y ** 2 < 1) and (x ** 2 + (y - 1) ** 2 < 1):
        # 境界上の点は含まないものとした。
            count += 1
    result = float(count) / n
    return result

# 以下、動作確認

n = 100

print("------------------------")
for i in range(5):
    t1 = time.time()
    s = kadai3(n)
    print("n:" + str(n) + "\n" + "面積:" + str(s))
    t2 = time.time()
    print("処理にかかった時間:"+str(t2 - t1))
    print("理論値との誤差:"+str(abs(s - 0.5706)))
    print("------------------------")
    n *= 10




#nを10e-2、3、4、5、6としてそれぞれ出力した。nが大きいほど下で求めた理論値に近づくことが多いのがわかる（時間はかかる）。

"""
ちなみに円周率を3.1416として面積を出してみると、
(面積) = (1 * 1 * 3.1416 * 1/4 - 1 * 1 * 1/2) * 2
で出せるから、結果は0.5706となる（この値を理論値としてプログラム内に用いた）。

(生成する点の数と誤差の関係)
誤差とは理論値と実測値の差のことを指す。したがって生成する点の数が多いほど、大数の法則により値は理論値に近づくので基本的に誤差は小さくなる。
しかし生成する点が少なくても理論値に近い値を出すこともある。
つまり上記で述べた関係ははあくまで平均をとった場合の話であるので必ずしも点の数が多いほど理論値に近づくわけではないが、
プログラム上での乱数は確率分布に従うよう出力される擬似乱数であるため、今回の課題の場合、正方形内に等しく散らばるように乱数が生成される結果、面積が理論値に近づく確率は高くなるのである。

"""
"""
参考文献


計測時間を表示する
https://www.sejuku.net/blog/23955

絶対値を求める
http://programming.blogo.jp/python/abs

"""
